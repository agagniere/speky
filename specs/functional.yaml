kind: requirements
category: functional
requirements:
- id: SF001
  short: Write requirements
  long: |
    The user shall be able to write requirements and functional tests in a textual format.

    A requirement is a combination of:
      - a unique identifier
      - a statement
      - the summary of the statement in a few words (optional)

    A test is constituted by:
      - one or more requirements that it validates at least partially
      - A procedure to follow, with instructions and expected behaviors / outputs
  tags: [input]
  properties:
    version: 2
- id: SF002
  short: PDF output
  long: |
    The user shall be able to read the specifications as a PDF document.

    Each requirement shall appear as a section containing the various informations listed in `SF001`,
    but also which tests validate this requirement and which other requirements refer to it.
  tags: ['output:pdf']
  properties:
    version: 2
- id: SF003
  short: HTML output
  long: The user shall be able to read the specifications as a static website
  tags: ['output:html']
- id: SF004
  short: Version controlled
  long: The user shall be able to rollback changes, view previous versions, review changes
  tags: [versioning]
- id: SF005
  short: Differential PDF
  long: The user shall be able to obtain a differential PDF highlighting the differences between a version and the previous
  tags:
    - output:pdf
    - versioning
    - todo
- id: SF006
  short: Support comments
  long: The user shall be able to add comments to a specification and to tests
  tags: [input]
- id: SF007
  short: Index requirements by tags
  long: The user shall be able add tags to requirements, and the outputs will contain the list of requirements for each tag
  tags: [output:both]
- id: SF008
  short: Quote client requirement
  client_statement: We need to be able to read the original statement a requirement is based on
  long: The user shall be able to provide a variant of a requirement, as it was worded by the client. It shall be displayed atop the requirement, in the style of a quote.
  tags: [input]
- id: SF009
  short: CSV for requirements
  client_statement: We are currently using Excel and want to easily import an existing requirements table
  long: |
    The user shall be able to provide a CSV for the `specifications` kind of input file.

    The first row must specify the field of the column, valid values include:
    - `id`
    - `client_statement`
    - `short`
    - `long`
  tags: [input:formats]
- id: SF010
  short: CSV for comments
  long: |
    The user shall be able to provide a CSV for the `comments` kind of input file.

    The first row must specify the field of the column, valid values are:
    - `date`
    - `from`
    - `external`
    - `about`
    - `text`

    The `external` column must contain booleans, either `true`, `false`, `1` or `0`.
  tags: [input:formats]
- id: SF011
  short: "Support free key:value"
  client_statement: We may want to associate a version to a requirement, as well as an author
  long: |
    The user shall be able to associate arbitrary "key:value" items to a requirement. It shall appear below the requirement.

    This allows having project-specific fields.
  tags: [input]
  properties:
    version: 1
    author: Gloutch
    since: '`0.1.0`'
- id: SF012
  short: YAML validation
  long: The user shall be able to validate that a YAML is valid, without having to generate an output.
  tags: [tooling]
  properties:
    since: '`0.1.0`'
- id: SF013
  short: Parameterized tags
  ref: [SF007]
  long: |
    The user shall be able to group and nest tags one level:
    a tag can have a subtag with the syntax `group:subtag`.
  tags: [output:both]
  properties:
    since: '`0.1.0`'
