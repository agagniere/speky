kind: tests
category: functional
tests:
- id: TF001
  ref:
    - SF001
    - SN001
  short: Writing requirements as text
  long: We write requirements and functional tests in text files
  initial: Blank project
  steps:
    - action: |
        Open a file called `spec.yaml` in a text editor,
        write 2 requirements inside, so that it contains:
      run: cat spec.yaml
      sample_lang: yaml
      sample: |
        kind: requirements
        category: functional
        requirements:
        - id: S01
          short: Lorem ipsum
          long: The first requirement
        - id: S02
          long: The second requirement
    - action: |
        Verify the requirements are human-readable, in YAML foramt, and contain:
        - A unique identider in `id`
        - A summary in `short`
        - The requirement statement in `long`
    - action: |
        Open a file called `tests.yaml` in a text editor and write the following content inside:
      run: cat tests.yaml
      sample_lang: yaml
      sample: |
        kind: tests
        category: functional
        tests:
          - id: T01
            ref: [S01]
            long: The first test, that validates the first requirement
            steps:
              - action: A first step
              - action: A second step, with a shell command
                run: echo Hello
    - action: |
        Verify the tests are also in YAML format and contain:
        - The validated requirement(s) in `ref`
        - A procedure to follow in `steps`
- id: TF002
  ref:
    - SF002
    - SN004
  short: Generate a PDF
  long: Output requirements and tests in PDF format
  prereq: [TF001]
  steps:
    - action: List the yamls files of the project inside a typst file
      run: cat specification.typ
      sample_lang: typst
      sample: |
        #import "@local/speky:0.0.7": speky
        #speky(("spec.yaml",  "tests.yaml").map(yaml))
    - action: Run Typst and open PDF
      run: typst compile specification.typ && open specification.pdf
    - action: |
        Verify the requirements are found inside:
        - The unique ID and short summary as section title
        - The statement as a paragraph

        Verify that:
        - the test `T01` links to the requirement `S01`: "Is a test for `S01` Lorem ipsum"
        - the requiremenmt `S01` links to the test `T01`: "Tested by `T01`"
- id: TF003
  ref: [SF004]
  short: Use Git for versionning
  long: Setup a git repo with the current files, to be able to revert any change if desired
  prereq: [TF002]
  steps:
    - action: Initialize a git repository
      run: git init
      expected: Initialized empty Git repository in [...]
    - action: Start tracking the specification files
      run: git add spec.yaml specification.typ
    - action: Save current files version
      run: |
        git commit -m "Initial commit: first 2 requirements and 1 test"
    - action: Give a name to that version
      run: git tag 0.0.1
    - action: Delete a requirement in spec.yaml
      run: cat spec.yaml
      sample_lang: yaml
      sample: |
        kind: requirements
        category: functional
        requirements:
        - id: S01
          short: Lorem ipsum
          long: The first requirement
    - action: Confirm the requirement is gone
      run: typst compile specification.typ && open specification.pdf
    - action: Revert the deletion
      run: |
        git checkout -- .
    - action: Confirm the requirement is back
      run: typst compile specification.typ && open specification.pdf
- id: TF004
  ref: [SF006]
  short: Add comments
  long: Write a comment file to add comments to requirements
  prereq: [TF002]
  steps:
    - action: Create a comment file
      run: cat comments.yaml
      sample_lang: yaml
      sample: |
        kind: comments
        comments:
        - about: S01
          from: Some Person
          date: 01/01/2025
          text: The first comment
    - action: Add it to the typst source
      run: cat specification.typ
      sample_lang: typst
      sample: |
        #import "@local/speky:0.0.7": speky
        #speky(("spec.yaml", "tests.yaml", "comments.yaml").map(yaml))
    - action: Regenerate the PDF and open it
      run: typst compile specification.typ && open specification.typ
    - action: |
        Verify the comment appears in requirement `S01`, in the "Comments" subsection.
- id: TF005
  short: Tags
  long: Adding a tag to a requirements adds this requirement to the list of that tag.
  ref: [SF007]
  prereq: [TF002]
  steps:
    - action: |
        Add tags to requirements: edit `spec.yaml` for it to become:
      run: cat spec.yaml
      sample_lang: yaml
      sample: |
        kind: requirements
        category: functional
        requirements:
        - id: S01
          short: Lorem ipsum
          long: The first requirement
          tags:
            - foo
            - bar
        - id: S02
          long: The second requirement
          tags: [bar, baz]
    - action: Regenerate the PDF and verify the tags index is present and listing the right requirements
      run: typst compile specification.typ && open specification.pdf
    - action: |
        In the `S01` section, click on the `bar` label to jump to the list of Bar
    - action: |
        Verify both `S01` and `S02` are listed
- id: TF006
  short: Client requirement
  long: Add the original wording of a requirement from the client
  ref: [SF008]
  prereq: [TF002]
  steps:
    - action: Add the client wording of a requirement
      run: cat spec.yaml
      sample_lang: yaml
      sample: |
        kind: requirements
        category: functional
        requirements:
        - id: S01
          short: Lorem ipsum
          long: The first requirement
        - id: S02
          long: The second requirement
          client_statement: I want this and that
    - action: Regenerate the PDF and verify the client statement appears above the regular statement
      run: typst compile specification.typ && open specification.pdf
- id: TF008
  short: HTML output
  long: Generate Myst Markdown from the specification in YAML, then have sphinx generate a static website
  ref: [SF003]
  initial: The [uv](https://docs.astral.sh/uv/getting-started/installation/) tool is required.
  prereq: [TF004]
  steps:
    - action: Install the speky CLI tool
      run: uv tool install git+https://github.com/agagniere/speky#master
      expected: |
        [...]
        Installed 1 executable: speky
    - action: Use it to generate Myst Markdown from the specification in YAML
      run: |
        speky spec.yaml tests.yaml comments.yaml \
              --output-folder pages --project-name Foo
      expected: |
        Loading spec.yaml
        Loading tests.yaml
        Loading comments.yaml
    - action: Install sphinx with dependencies
      run: uv tool install sphinx --with furo,sphinx-design,sphinx-copybutton,myst-parser
      expected: |
        [...]
        Installed 4 executables: sphinx-apidoc, sphinx-autogen, sphinx-build, sphinx-quickstart
    - action: Configure sphinx
      run: cat conf.py
      sample_lang: python
      sample: |
        project    = 'Dummy'
        language   = 'en'
        extensions = [ 'myst_parser', 'sphinx_design' ]
        html_theme = 'furo'
        myst_enable_extensions = [ 'colon_fence' ]
    - action: Run sphinx to generate HTML
      run: sphinx-build -M html pages output --conf-dir .
      expected: |
        [...]
        The HTML pages are in output/html.
    - action: View the static website
      run: open output/html/index.html
    - action: |
        Validate the site contains a page for `S01`, which contains:
        - The unique identifier and summary as the page title
        - The statement as a paragraph
        - A link to `T01` in a dropdown: "Tested by"
    - action: |
        Click on the link to `T01`, and verify that:
        - `S01` is listed as a tested requirement: "Is a test for"
        - The procedure is displayed, with each step in the expected order
- id: TF009
  ref: [SF011]
  short: Validating YAMLs
  long: Without generating any output, we validate that the YAMLs conform to the expected schema
  initial: The [uv](https://docs.astral.sh/uv/getting-started/installation/) tool is required.
  prereq: [TF004]
  steps:
    - action: Install Yamale
      run: uv tool install yamale
      expected: |
        [...]
        Installed 1 executable: yamale
    - action: Obtain the schema
      run: curl --pogress-bar -O https://raw.githubusercontent.com/agagniere/speky/refs/heads/master/schema.yaml
      expected: '################################################################################################# 100.0%'
    - action: Run Yamale on the YAMLs
      run: yamale -s schema.yaml specs.yaml tests.yaml comments.yaml
      expected: |
        Validating specs.yaml...
        Validating tests.yaml...
        Validating comments.yaml...
        Validation success! üëç
